#!/bin/sh #good enough highlighting
#load_module "nginx-nchan/pkg/nginx-nchan-dev/etc/nginx/modules/ngx_nchan_module.so";
#user  nobody;
worker_processes      1;
working_directory     /tmp;

worker_rlimit_core    1024M;
worker_rlimit_nofile  100000;
#debug_points stop;

error_log             /dev/stderr;

pid                   /tmp/lua-select-test-nginx.pid;
daemon                off;
#load_module /home/leop/sandbox/ngx_global_counter_var/dev/nginx-pkg/src/nginx/objs/ngx_http_global_counter_var_module.so;
#load_module /home/leop/sandbox/ngx_global_counter_var/dev/nginx-pkg/src/nginx/objs/ngx_stream_global_counter_var_module.so;

events {
  worker_connections  50000;
  accept_mutex on;
}

http {
  access_log /dev/stdout;
  error_log             /dev/stderr debug;
  server {
    listen       8082;
    location / {
      default_type text/plain;
      return 201 "Hey there";
    }
  }
}


stream {
  server {
    listen 8083;
    error_log             /dev/stderr debug;
    content_by_lua_block {
      local select = require "ngx.select"
      local mm = require "mm"
      local clientsock = assert(ngx.req.socket(true))
      local upsock = ngx.socket.tcp()
      assert(upsock:connect("127.0.0.1", 8092))
      upsock:settimeouts(100, 30, 1)
      clientsock:settimeouts(100, 30, 1)
      --mm({udp=udpsock, clientsock=clientsock, upsock=upsock, ngx_socket=ngx.socket})
      upsock:send("say hello please\n")
      upsock:receive()
      upsock:send("thanks!\n")
      while true do
        local socks, err = select.select_read(clientsock, upsock)
        ngx.log(ngx.NOTICE, "socks: " .. type(socks) .. " ".. tostring(socks))
        ngx.log(ngx.NOTICE, "err: " .. type(err) .. " ".. tostring(err))
        if socks == nil then
          ngx.log(ngx.NOTICE, "got select() error:" .. tostring(err))
          break
        else
          ngx.log(ngx.NOTICE, "number of socks selected: " ..  #socks)
        end
        for _, sock in ipairs(socks) do
          local data, err = sock:receive()
          if not data then
            ngx.log(ngx.NOTICE, "got receive error:" .. tostring(err))
            break
          end
          sock:send("you said: " .. data.."\n")
          data, err = sock:receive()
          ngx.log(ngx.NOTICE, "extra receive:" .. tostring(data).. ", " .. tostring(err))
        end
      end
      
    }
  }
}
